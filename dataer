#!/bin/python3
# -*- coding: utf-8 -*-
# TODO; proper port to python 3
""" CLI tool to facilitate manipulation of data files
for webscanner scenarios """
import sys
import os
import subprocess
import json
import pdb
import re
import psycopg2 as pcg
#import xml.etree.ElementTree as ET
import lxml.etree as ET
from io import open
from unidecode import unidecode
from configparser import ConfigParser
# Params: data_filename menu_name files
# Commands:
# - template: builds empty, scaffold json file
# - autofill: fills a json file by looking inside the cwd
# - build: builds data file from json data
# - unravel: splits a data file into its components
# - update: changes only selected records in the data file
# - inject: injects code of scenario into existing db entries

# pylint: disable=superfluous-parens
# pylint: disable=too-few-public-methods
# pylint: disable=invalid-name
# pylint: disable=no-else-return

# TODO: automatically call linters
# TODO: support of both identifier and name for views

preface="""\
Dataer is a utility to allow working on individual components of a web scanner scenario.
Enables bypassing module update when pushing modifications,
automatic building of data file, and exploding existing data file into its components."""

hints="""\
\x1b[1mUsage:\x1b[m dataer <command> [<FILE>]
see '\x1b[1mdataer -h\x1b[m' for more informations"""

help="""\
\x1b[1mUsage\x1b[m:
\t\x1b[33mdataer template\x1b[m
\t\x1b[33mdataer unravel\x1b[m \x1b[1;4mSOURCE\x1b[m
\t\x1b[33mdataer build\x1b[m \x1b[1;4mTARGET\x1b[m
\t\x1b[33mdataer inject\x1b[m \x1b[1;4m[DB_NAME]\x1b[m
\t\x1b[33mdataer autofill\x1b[0;35m*\x1b[m
\t\x1b[33mdataer update\x1b[m \x1b[1;4mTARGET\x1b[0;35m*\x1b[m
\x1b[35m*NIY\x1b[m"""

COMMANDS={'unravel', 'build', 'inject', 'autofill', 'update', 'template'}
IMPLEMENTED={'unravel', 'build', 'inject', 'template'}
UNIMPLEMENTED=COMMANDS-IMPLEMENTED

# If arg[1] is -h : display help
# If arg[1] not in ... : display usage
# If arg[1] doesn't exist: error not enough arg, display usage
try:
    command = sys.argv[1]
    if(command in ['-h', '--help']):
        print(preface, file=sys.stderr)
        print(help, file=sys.stderr)
        exit(0)
    elif(command not in COMMANDS):
        print(f"\x1b[31mERROR\x1b[m: '{command}' is not a valid command!", file=sys.stderr)
        print(hints, file=sys.stderr)
        exit(1)
except IndexError:
    print("\x1b[31mERROR\x1b[m: Not enough args!", file=sys.stderr)
    print(hints, file=sys.stderr)
    exit(1)


# Parse config file
config = ConfigParser()
if(not config.read(os.environ ['HOME']+'/.dataer.ini')):
    print("Could not find config file (should be ~/.dataer.ini)")
    exit(1)
for key, val in config['DATAER'].items():
    locals()[key.upper()] = val
RAW = bool()
SECURE = bool()
DEFAULT_RAWNESS = False
DEFAULT_SEC = True

VIEW_KEY = "view"
OCS_KEY = "onchange"
CSS_KEY = "style"
SKEL_NAME = "skeleton.json"
MENU_KEY = "menu"

if len(sys.argv) < 2:
    print("Not enough args\nDATA_FILENAME MENU_NAME MODULE_NAME FILES...")
    sys.exit()

def make_refs(names, module_name=""):
    """Joins "names" with proper syntax"""
    refs = []
    if(not names):
        return u''
    for name in names:
        if name:
            if module_name:
                refs.append("ref('%s.%s')"%(module_name, name))
            else:
                refs.append("ref('%s')"%(name))
    return ',\n            '.join(refs)

class Builder:
    """ Handles the building of the xml data file based on what's been parsed in the JSON """
    def __init__(self, name, data):
        """ init """
        self.name = name
        self.data = data
        self.views = []
        self.styles = []
        self.onchanges = []
        if('view' in data):
            self.views = [view.get('id') or view['name'] for view in data['view']]
        if("external_views" in data):
            self.views += data['external_views']
        if('style' in data):
            self.styles = [style['name'] for style in data['style']]
        if("external_style" in data):
            self.styles += data['external_style']
        if('onchange' in data):
            self.onchanges = [onchange['id'] if 'id' in onchange else onchange['name'] for onchange in data['onchange']]
        if("external_oc" in data):
            self.onchanges += data['external_oc']
        global RAW
        RAW = data['raw'] if 'raw' in data else DEFAULT_RAWNESS
        global SECURE
        SECURE = data['secure'] if 'secure' in data else DEFAULT_SEC

    def _build_onchange(self, data):
        """ self-explanatory """
        # id, name, model_name, code
        if(data['file']):
            raw_type = "raw_"*RAW+"code"
            data['id'] = data['id'] if 'id' in data else data['name']
            code = process_file(data['file'], 'py')
            code = code.strip()
            content = [
                f"""    <record id="{data['id']}" model="manual.onchange">""",
                f"""        <field name="name">{data['name']}</field>""",
                f"""        <field name="model_id" search="[('model', '=', '{data['model']}')]"/>""",
                f"""        <field name="is_translatable_code" eval="{not RAW}"/>""",
                f"""        <field name="{raw_type}">""",
                f"""{code}""",
                f"""        </field>""",
                f"""    </record>\n\n""",
            ]
            if(not SECURE):
                content.insert(2, """        <field name="is_security_check" eval="False"/>""")
            return '\n'.join(content)
        else:
            return ''

    def _build_style(self, data):
        """ self-explanatory """
        # id, name, pages, code
        if(data['file']):
            code = process_file(data['file'], 'css')
            code = code.strip()
            refs = make_refs(data['pages'])
            content = [
                f"""    <record id="{data['name']}" model="ir.ui.css.ionic">""",
                f"""        <field name="name">{data['name']}</field>""",
                f"""        <field name="page_ids" eval="[(6, 0, [{refs}])]"/>""",
                f"""        <field name="style">""",
                f"""            <![CDATA[""",
                f"""{code}""",
                f"""            ]]>""",
                f"""        </field>""",
                f"""    </record>\n\n""",
            ]
            return '\n'.join(content)
        else:
            return ''

    def _build_view(self, data):
        """ self-explanatory """
        # id, name, model_name, code
        if(data['file']):
            raw_type = "raw_"*RAW + "architecture"
            code = process_file(data['file'], 'xml')
            code = code.strip()
            data['id'] = data['id'] if 'id' in data else data['name']
            content = [
                f"""    <record id="{data['id']}" model="ir.ui.view.ionic">""",
                f"""        <field name="identifier">{data['id']}</field>""",
                f"""        <field name="name">{data['name']}</field>""",
                f"""        <field name="model_id" search="[('model', '=', '{data['model']}')]"/>""",
                f"""        <field name="is_translatable_architecture" eval="{not RAW}"/>""",
                f"""        <field name="{raw_type}" type="xml">""",
                f"""{code}""",
                f"""        </field>""",
                f"""    </record>\n\n""",
            ]
            return '\n'.join(content)
        else:
            return ''


    def _build_menu(self, data):
        """ self-explanatory """
        # id, name, icon, main_view, users, sequence, views, styles, ocs
        views = make_refs(self.views)
        styles = make_refs(self.styles)
        onchanges = make_refs(self.onchanges)
        #users = make_refs([data['users'],]) # TODO: improve
        if not data.get('id'):
            data['id'] = data['name']
        if(data['name']):
            content = """\
    <record id="%s" model="ir.ui.menu.ionic">
        <field name="name">%s</field>
        <field name="icon" type="char">%s</field>
        <field name="sequence" eval="%s"/>
        <field name="view_id" ref="%s"/>
        <field name="initial_onchange_id" ref="%s"/>
        <field name="view_ids" eval="[(6, 0, [%s])]" />
        <field name="css_ids" eval="[(6, 0, [%s])]"/>
        <field name="onchange_ids" eval="[(6, 0, [%s])]" />
    </record>\n\
"""%(unidecode(data['id']), data['name'], data['icon'], data['seq'],
         data['main_view'], data['init_oc'], views, styles, onchanges)
            return content
        else:
            return u''

    def build(self):
        """ Builds the whole data xml file """
        file_ = open(self.name, 'w', encoding='utf-8')

        if(not 'fragment' in self.data):
            file_.write(u"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<openerp>\n<data>\n")
        if('onchange' in self.data):
            for oc in self.data['onchange']:
                file_.write(self._build_onchange(oc))
        if('view' in self.data):
            for view in self.data['view']:
                file_.write(self._build_view(view))
        if('style' in self.data):
            for style in self.data['style']:
                file_.write(self._build_style(style))
        if('menu' in self.data):
            file_.write(self._build_menu(self.data['menu']))
        if(not 'fragment' in self.data):
            file_.write(u"</data>\n</openerp>\n")
        file_.close()

def build_elems(files):
    """ TODO """
    exts = ["xml", "py", "css"]
    dic = {ext:[] for ext in exts}
    for singular_file in files:
        for ext in exts:
            if singular_file.find(".%s"%(ext)) != -1:
                # gets filename without extension
                name_base = ''.join(singular_file.split('.')[:-1])
                dic[ext].append(name_base)
    return dic

def sanitize(content):
    """ TODO """
    content = content.replace('&', '&amp;')
    content = content.replace('<', '&lt;')
    content = content.replace('>', '&gt;')
    return content

def process_file(filename, ext):
    """ TODO """
    if filename:
        f_handler = open("%s"%(filename), 'r', encoding='utf-8')
        lines = f_handler.readlines()
        content = ''.join(lines)
        if ext != "xml":
            content = sanitize(content)
        return content
    else:
        return u''

def template(filename=DEFAULT_JSON_NAME):
    """ Makes the template json file to use as a base for building, later """
    build_makefile()
    build_loc_link()
    file_ = open('.gitignore', 'a')
    file_.write(".gitignore\n")
    file_.write("data*.xml\n")
    file_.write("*.xtml\n")
    file_.write("tags")
    file_.close()
    if os.path.exists(filename):
        ans = input("file %s already exists. overwrite ? y/any\n"%(filename))
        if ans != "y":
            return 1
    file_ = open(filename, "w", encoding='utf-8')
    file_.write(u"""\
{
    "raw": true,
    "style":[
        {
            "file":"",
            "name":"",
            "pages":[""]
        }
    ],
    "external_style":[
        ""
    ],
    "onchange":[
        {
            "file":"",
            "name":"",
            "model":"manual.onchange"
        }
    ],
    "external_oc":[
        ""
    ],
    "view":[
        {
            "file":"",
            "id":"",
            "name":"",
            "model":"ir.ui.view.ionic"
        }
    ],
    "external_views":[
        ""
    ],
    "menu":{
        "id":"",
        "name":"",
        "icon":"",
        "main_view":"",
        "init_oc":"",
        "seq":"0"
    }
}""")
    file_.close()
    return 0

def unescape(input: str) -> str:
    """ Takes string with xml escaped characters, returns unescaped version"""
    unescaped = input.replace('&lt;', '<')
    unescaped = unescaped.replace('&gt;', '>')
    unescaped = unescaped.replace('&amp;', '&')
    return unescaped


def unravel(filename: str) -> None:
    """ Parses through an existing data file, and splits it into its components """
    if(not os.path.exists(filename)):
        print(f"ERROR: File {filename} does not exist")
        return False
    # Update Makefile
    name_only = os.path.basename(os.path.splitext(filename)[0])
    subprocess.run(['sed','-i', f"s/filename = data/filename = {name_only}/", 'Makefile'])

    # Update symlink
    link_target = os.path.dirname(filename)
    ans = input(f"Use {link_target} as 'location' ? (y/any): ")
    if(ans == "y"):
        try:
            os.remove('location')
        except:
            pass
        os.symlink(os.path.expanduser(link_target), 'location')

    # Parses XML
    tree: ET.ElementTree = ET.parse(filename)
    root: ET.Element = tree.getroot().findall('./data')[0]
    records: list[ET.Element] = root.findall('./record')
    entries = {VIEW_KEY:[], OCS_KEY:[], CSS_KEY:[], MENU_KEY:[]}
    for record in records:
        record_model = record.attrib.get('model')
        record_id = record.attrib.get('id')
        record_name: str = ''
        code = False
        content_name: list
        file_ext: str
        id = None
        is_view = False
        # Retrieves code tag name based on record type
        if(record_model == 'manual.onchange'):
            content_name = ["code", "raw_code"]
            file_ext = ".py"
            record_type = OCS_KEY
            is_view = False
        elif(record_model == 'ir.ui.view.ionic'):
            content_name = ["architecture", 'raw_architecture']
            file_ext = ".xml"
            record_type = VIEW_KEY
            is_view = True
        elif(record_model == 'ir.ui.css.ionic'):
            content_name = ["style"]
            file_ext = ".css"
            record_type = CSS_KEY
            is_view = False
        elif(record_model == 'ir.ui.menu.ionic'):
            record_type = MENU_KEY
        else:
            # Doesn't handle something other than views, onchanges, and css sheets
            continue

        # Gets elem name, code after substitutions
        for field in [field for field in record if type(field) != ET._Comment]:
            if field.attrib["name"] == "name":
                record_name = field.text
            elif field.attrib["name"] in content_name:
                code = ET.tostring(field[0], encoding="unicode", method="xml") if is_view else unescape(field.text)
                code = code.strip()
            elif field.attrib['name'] == "model_id":
                model = get_model(field)
            elif field.attrib['name'] == "identifier":
                id = field.text
            # Menu only
            elif field.attrib['name'] == 'icon':
                icon = field.text
            elif field.attrib['name'] == 'initial_onchange_id':
                init_oc = field.attrib['ref']
            elif field.attrib['name'] == 'view_id':
                main_view = field.attrib['ref']
            elif field.attrib['name'] == 'sequence':
                seq = field.attrib['eval']

        # Doesn't produce empty files
        if record_name and code:
            model = model if 'model' in locals() else record_model
            add_record(entries, record_type, record_name, file_ext, model, record_id)
            if not (os.path.exists(record_id + file_ext)):
                file_ = open(record_id + file_ext,'w')
                file_.write(code)
                file_.close()
            else:
                print(f"'{record_id + file_ext}' already exists")
        elif record_type == MENU_KEY:
            init_oc = init_oc if 'init_oc' in locals() else ''
            row = { 
                   'id' : record_id, 'name' : record_name, 'icon': icon,
                   'init_oc': init_oc, 'main_view': main_view,
                    'seq': seq
            }
            entries[MENU_KEY].append(row)

    get_skel(entries) 

def add_record(container, elem_type, name, ext, model, id):
    """Adds a record (view/oc/css) to the container"""
    row = {'name':name, 'file':id+ext, 
           'model':model, 'id': id }
    if(elem_type == VIEW_KEY):
        row['file'] = id + ext
    elif(elem_type == CSS_KEY):
        row.pop('model')
        row.pop('id')
        # TODO: extract pages as well
        row['pages'] =  []
    container[elem_type].append(row)

def get_skel(container, skel_name = SKEL_NAME):
    """ Updates skeleton body from record container"""
    if(not os.path.exists(skel_name)):
        print("Skeleton not found, couldn't update it")
        return None
    with open(skel_name, 'r') as file:
        skeleton = json.load(file)
    skeleton[VIEW_KEY] = container[VIEW_KEY]
    skeleton[OCS_KEY] = container[OCS_KEY]
    if container[CSS_KEY]:
        skeleton[CSS_KEY] = container[CSS_KEY]
    skeleton[MENU_KEY] = container[MENU_KEY][0]
    with open(skel_name, 'w') as file:
        json.dump(skeleton, file, indent=4, ensure_ascii=False)

def get_model(elem: ET.Element) -> str:
    """Extracts model name from element"""
    search=elem.attrib['search']
    raw_model = search.split(',')[2]
    match = re.search(r"(?<=').*(?=')", raw_model)
    model = match.group(0)
    return model


def build_makefile(filename=DEFAULT_DATA_NAME, ext=DEFAULT_DATA_EXT, target=DEFAULT_TARGET_LOCATION):
    if os.path.exists('Makefile'):
        ans = input("Makefile already exists. overwrite ? y/any\n")
        if ans != "y":
            return 1
    file_ = open("Makefile", 'w', encoding='utf-8')
    file_.write(u"""\
filename = %s
ext = %s

always:
\tdataer build .$(filename).$(ext)
\tcp -f ./.$(filename).$(ext) %s/$(filename).xml"""%(filename, ext, target))
    file_.close() 

def build_loc_link() -> None:
    if(not os.path.exists('location')):
        os.symlink(os.path.expanduser('~/git/openprod/openprod-addons/web_scanner/data/'), 'location')


class Injecter:
    def __init__(self, json_data):
        self.data = json_data
        global RAW
        RAW = self.data['raw'] if 'raw' in self.data else DEFAULT_RAWNESS
        self.views = []
        self.styles = []
        self.onchanges = []

    def psql_sanitize(self, filename):
        """ TODO """
        if filename:
            f_handler = open(filename, 'r', encoding='utf-8')
            content = f_handler.read().replace("'", "''")
            return content
        else:
            return u''

    def inject_entry(self, entry_name, entry_type, code, feedback=False):
        """Injects update db entry with given code. Allows
        to bypass the lenghty update process
        """
        # TODO: feedback when entry not found
        global DB_NAME, USER, PW
        connection = pcg.connect(f"dbname={DB_NAME} user={USER} password={PW}")
        cursor = connection.cursor()
        rawness = "raw_" * RAW
        if(entry_type == "view"):
            stmt = f"""
            UPDATE ir_ui_view_ionic
            SET {rawness}architecture = '{code}',
                is_translatable_architecture = {not RAW}
            WHERE identifier = '{entry_name}'
            """
        elif(entry_type == "onchange"):
            stmt = f"""
            UPDATE manual_onchange
            SET {rawness}code = '{code}',
                is_translatable_code = {not RAW}
            WHERE name = '{entry_name}'
            """
        elif(entry_type == "css"):
            stmt = f"""
            UPDATE ir_ui_css_ionic
            SET style = '{code}'
            WHERE name = '{entry_name}'
            """
        else:
            raise Exception(f"urecognized type {entry_type}")
        feedback and print(code) # TODO: eventually remove
        cursor.execute(stmt)
        connection.commit()
        cursor.close()
        connection.close()

    def inject_scenario(self, feedback=True):
        for view in self.data['view']:
            code = self.psql_sanitize(view['file'])
            view['id'] = view['id'] if 'id' in view else view['name']
            self.inject_entry(view['id'], 'view', code)
            feedback and print(f'Injected {view["file"]} into {view["id"]}')
        for onchange in self.data['onchange']:
            code = self.psql_sanitize(onchange['file'])
            self.inject_entry(onchange['name'], 'onchange', code)
            feedback and print(f'Injected {onchange["file"]} into {onchange["name"]}')
        for sheet in self.data['style']:
            code = self.psql_sanitize(sheet['file'])
            self.inject_entry(sheet['name'], 'css', code)
            feedback and print(f'Injected {sheet["file"]} into {sheet["name"]}')

mode = sys.argv[1]
if (mode == "template"):
    template()
elif (mode == "build"):
    try:
        DEFAULT_DATA_NAME = sys.argv[2]
    except:
        print("No name given. Default name is %s"%(DEFAULT_DATA_NAME))
    json_file = open(DEFAULT_JSON_NAME, 'r', encoding='utf-8')
    json_data = json.load(json_file)
    json_file.close()
    builder_o = Builder(DEFAULT_DATA_NAME, json_data)
    builder_o.build()
elif (mode == "autofill"):
    print("Autofill not supported as of now")
    print("Supposed to scan the cwd and fill the json file with what it found there")
elif (mode == "unravel"):
    try:
        filename = sys.argv[2]
    except:
        print("No name given.")
    print("WIP-ish ?")
    unravel(filename)
elif (mode == "update"):
    print("Update not supported as of now")
    print("Supposed to not completely rebuild the xml data file,\
            but only updates the fields mentionned in the json")
    print("to allow working on xml files which haven't been unraveled")
elif (mode == "inject"):
    print("WIP")
    try:
        DB_NAME = sys.argv[2]
    except:
        if(os.path.exists(DEFAULT_DBNAME_PATH)):
            with open(DEFAULT_DBNAME_PATH) as name_file:
                DB_NAME = name_file.read().replace('\n','')
            print(f"Db name found: '{DB_NAME}'")
        else:
            print(f"no db name given. '{DB_NAME}' used.")
    json_file = open(DEFAULT_JSON_NAME, 'r', encoding='utf-8')
    json_data = json.load(json_file)
    json_file.close()
    injecter_o = Injecter(json_data)
    injecter_o.inject_scenario()
# TODO: delete, should be useless now
else:
    print("command '%s' not recognized (autofill/build/template/unravel/update/inject)"%(mode))


def unescape(input: str) -> str:
    """ Takes string with xml escaped characters, returns unescaped version"""
    unescaped = input.replace('&lt;', '<')
    unescaped = unescaped.replace('&gt;', '>')
    unescaped = unescaped.replace('&amp;', '&')
    return unescaped

